name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]
    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libacl1-dev

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Run all tests
        run: cargo test --all --verbose

      - name: Run delta sync tests
        run: cargo test --test delta_sync_test --verbose

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y libacl1-dev

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check formatting
        run: cargo fmt --all -- --check

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run security audit
        uses: rustsec/audit-check@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  macos-versions:
    name: macOS Versions
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-12, macos-13, macos-14, macos-15]
        include:
          - os: macos-12
            name: Monterey (Intel)
          - os: macos-13
            name: Ventura (Intel)
          - os: macos-14
            name: Sonoma (Apple Silicon M1)
          - os: macos-15
            name: Sequoia (Apple Silicon)
    steps:
      - uses: actions/checkout@v4

      - name: System Info
        run: |
          sw_vers
          uname -m
          sysctl hw.model || true
          df -T / | grep -i apfs || df -T /

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build
        run: cargo build --verbose

      - name: Run tests
        run: cargo test --all --verbose

      - name: Run APFS-specific tests
        run: cargo test test_cow_strategy_used_on_apfs --verbose

  linux-distros:
    name: Linux Distros
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distro:
          - ubuntu:22.04
          - ubuntu:24.04
          - debian:12
          - fedora:40
          - alpine:3.19
    container:
      image: ${{ matrix.distro }}
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (Debian/Ubuntu)
        if: startsWith(matrix.distro, 'ubuntu') || startsWith(matrix.distro, 'debian')
        run: |
          apt-get update
          apt-get install -y curl gcc libacl1-dev pkg-config libssl-dev

      - name: Install dependencies (Fedora)
        if: startsWith(matrix.distro, 'fedora')
        run: |
          dnf install -y gcc libacl-devel openssl-devel pkg-config curl

      - name: Install dependencies (Alpine)
        if: startsWith(matrix.distro, 'alpine')
        run: |
          apk add --no-cache curl gcc musl-dev acl-dev openssl-dev pkgconfig

      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Build
        run: |
          . $HOME/.cargo/env
          cargo build --verbose

      - name: Run tests
        run: |
          . $HOME/.cargo/env
          cargo test --all --verbose

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y libacl1-dev

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Generate coverage
        run: cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./cobertura.xml
          fail_ci_if_error: false
